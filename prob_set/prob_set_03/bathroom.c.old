#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

/* define */
#define USAGE "<bathroom_size>"
#define NUM_THREADS 6

/* function prototypes */
void* male(void*);
void* female(void*);

/* global variables */
sem_t bathroom_sem;
pthread_mutex_t gender_lock;
pthread_mutex_t bathroom_lock;
pthread_mutex_t count_lock;
pthread_cond_t males_finish;
pthread_cond_t females_finish;
int m_count = 0;
int f_count = 0;
bool m_waiting = 0;
bool f_waiting = 0;

/* threads */
pthread_t threads[NUM_THREADS];

int main(int argc, char* argv[]) {
	
	int N, rc;

	if(argc < 2 ) {
		printf("USAGE: %s %s\n", argv[0], USAGE);
		exit(1);
	}
	N = atoi(argv[1]);	
	sem_init(&bathroom_sem, 0, N);	
	pthread_mutex_init(&gender_lock, 0);
	pthread_mutex_init(&count_lock, 0);
	pthread_mutex_init(&bathroom_lock, 0);
	pthread_cond_init(&males_finish, 0);
	pthread_cond_init(&females_finish, 0);

	/* start threads */
	pthread_create(&threads[0], 0, male, 0);
	pthread_create(&threads[1], 0, male, 0);
	pthread_create(&threads[2], 0, female, 0);
	pthread_create(&threads[3], 0, female, 0);
	pthread_create(&threads[4], 0, male, 0);
	pthread_create(&threads[5], 0, male, 0);
	
	
	/* join threads */
	for( int i=0; i<NUM_THREADS; i++) {
		rc = pthread_join(threads[i], 0);
		if( rc ) 
			fprintf(stderr, "Error pthread_join() thread_id= %d\n", i);
	}

	return 0;
}


void* male(void* args) {
	
	pthread_mutex_lock(&count_lock);
	if( (!m_count && f_count)  || f_waiting ) {
		m_waiting = 1;
		pthread_cond_wait(&females_finish, &count_lock);
		pthread_mutex_lock(&bathroom_lock);
		m_waiting = 0;
	}
	pthread_mutex_unlock(&count_lock);
	sem_wait(&bathroom_sem);
	printf("male entered bathroom\n");
	pthread_mutex_lock(&count_lock);
	m_count++;
	pthread_mutex_unlock(&count_lock);

	// use bathroom
	sleep(5);
	
	pthread_mutex_lock(&count_lock);
	m_count--;
	pthread_mutex_unlock(&count_lock);
	if( !m_count ) {
		pthread_cond_broadcast(&males_finish);
		pthread_mutex_unlock(&bathroom_lock);
	}
	printf("male left bathroom\n");
	sem_post(&bathroom_sem);
}
void* female(void* args) {

	pthread_mutex_lock(&count_lock);
	if( (!f_count && m_count)  || m_waiting ) {
		f_waiting = 1;
		pthread_cond_wait(&males_finish, &count_lock);
		pthread_mutex_lock(&bathroom_lock);
		f_waiting = 0;
	}
	pthread_mutex_unlock(&count_lock);
	sem_wait(&bathroom_sem);
	printf("female entered bathroom\n");
	pthread_mutex_lock(&count_lock);
	f_count++;
	pthread_mutex_unlock(&count_lock);
	// use bathroom
	sleep(5);
	
	pthread_mutex_lock(&count_lock);
	f_count--;
	pthread_mutex_unlock(&count_lock);
	if( !f_count ) {
		pthread_cond_broadcast(&females_finish);
		pthread_mutex_unlock(&bathroom_lock);
	}
	printf("female left bathroom\n");
	sem_post(&bathroom_sem);
}
